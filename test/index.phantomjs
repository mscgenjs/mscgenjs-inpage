/* eslint-env phantomjs */
var fs     = require('fs');
var page   = require('webpage').create();
var system = require('system');

/* santa's little helpers */
function extractPath(pFileName){
    return pFileName.substr(0, pFileName.lastIndexOf(fs.separator));
}

function getWorkingDirectory(pFileName){
    return fs.workingDirectory + fs.separator + extractPath(pFileName);
}

function applyTemplate (pTemplate, pReplacementPairs){
    var lRetval = pTemplate;

    if (!!pReplacementPairs) {
        Object.keys(pReplacementPairs).forEach(function(pKey){
            lRetval =
                lRetval.replace(
                    new RegExp("\{"+pKey+"\}", "g"),
                    pReplacementPairs[pKey]
                );
        });
    }
    return lRetval;
}

function looksLikeAMochaReportJSON(pMessage){
    return pMessage.indexOf("stdout") > -1;
}

function JSONifyMochaReportJSON(pMessage){
    return JSON.parse ("{" + pMessage.
            replace(/stdout/g, "\"stdout\"").
            replace(/stderr/g, "\"stderr\"") + "}");
}

function reportIsSuccessful(pJSON){
    return (pJSON.stdout.stats.passes + pJSON.stdout.stats.pending) === pJSON.stdout.stats.tests;
}

function genericOnError(pMessage, pTrace) {
    console.log(pMessage);
    phantom.exit(1);
}

page.onCallback = function(pArgument){
    var lExitCode = 1;
    if (typeof pArgument.coverage === 'object') {
        lExitCode = pArgument.failures;
        fs.write('./coverage.json', JSON.stringify(pArgument.coverage, null, " "));
    } else {
        /* no coverage object found - for when run as a regular test */
        lExitCode = 0;
    }

    phantom.exit(lExitCode);
};

page.onConsoleMessage = function(pMessage, pLineNum, pSourceId){
    if(looksLikeAMochaReportJSON(pMessage)){
        var lMessage = JSONifyMochaReportJSON(pMessage);
        console.log(
            applyTemplate(
                "{ok} {passes}/{tests} passing ({duration}ms) - {failures} failed, {pending} pending",
                {
                    ok: reportIsSuccessful(lMessage)? "[ok]" : "[NOK]",
                    passes: lMessage.stdout.stats.passes,
                    tests: lMessage.stdout.stats.tests,
                    failures: lMessage.stdout.stats.failures,
                    pending: lMessage.stdout.stats.pending,
                    duration: lMessage.stdout.stats.duration
                }
            )
        );
    } else {
        console.log(
            applyTemplate(
                "{sourceId}, {lineNum}: {message}",
                {
                    sourceId: pSourceId,
                    lineNum: pLineNum,
                    message: pMessage
                }
            )
        );
    }
};

page.onError = genericOnError;
phantom.onError = genericOnError;

/* main */
fs.changeWorkingDirectory(getWorkingDirectory(system.args[0]));
page.open('./index.html', function(pStatus) {
    if ("fail" === pStatus){
        genericOnError("fail on page.open");
    }
});
